import Unify from '@/utils/unify'
const pdfMake = require('pdfmake/build/pdfmake.js')
// https://github.com/bpampuch/pdfmake/issues/910
import pdfFonts from "pdfmake/build/vfs_fonts"
pdfMake.vfs = pdfFonts.pdfMake.vfs

export default {}

export function header(planName) {
  return {
    header: {
      columns: [{
          text: 'Plan: ' + planName,
          style: 'headerName'
        },
        {
          text: 'Date: ' + new Date().toLocaleString('en-US'),
          alignment: 'right'
        }
      ]
    }
  }
}

export function metadata(planName) {
  return {
    info: {
      title: planName,
      author: 'Organizer',
      // subject: 'subject of document',
      // keywords: 'keywords for document',
    }
  }
}

export function footer() {
  return {
    footer: {
      columns: [{
          text: 'Generated by Organizer.',
        },
        {
          text: 'https://plan.v2grad.org',
          link: 'https://plan.v2grad.org',
          alignment: 'right'
        }
      ]
    },
  }
}

export function semesterTable(semester) {
  let credits = 0
  let table = {
    headerRows: 1,
    widths: ['*', '*', '*'],
    body: [
      [{
        text: Unify.COURSEATTRIBUTES.CourseName,
        style: 'semesterTableHeader'
      }, {
        text: Unify.COURSEATTRIBUTES.CourseTitle,
        style: 'semesterTableHeader'
      }, {
        text: Unify.COURSEATTRIBUTES.CreditHours,
        style: 'semesterTableHeader'
      }]
    ]
  }
  semester.courses.forEach((c) => {
    table.body.push([c.CourseName, c.CourseTitle, c.CreditHours])
    credits = credits + parseInt(c.CreditHours)
  })
  let columns = [{
    text: Unify.READABLE_SEMESTER(semester),
    style: 'semesterTitle'
  }, {
    text: 'Credits: ' + credits,
    style: 'semesterCredit'
  }]


  return [{
      columns: columns,
    },
    {
      table: table,
      //layout: 'lightHorizontalLines'
    }, '\n\n\n'
  ]
}

export function addShortURL(URL) {
  return {
    columns: [{
        text: 'View and Edit this plan online with link: ',
        width: 'auto'
      },
      {
        text: URL,
        link: URL,
        width: 'auto'
      }, {
        qr: URL,
        alignment: 'right',
        width: '*'
      }
    ]
  }
}

export function styles() {
  return {
    styles: {
      headerName: {
        bold: true,
        fontSize: 15,
        decoration: 'underline',
      },
      semesterTitle: {
        bold: true,
        fontSize: 18
      },
      semesterTableHeader: {
        fillColor: '#00c69e',
        color: '#ffffff',
        bold: true,
      },
      semesterCredit: {
        italics: true,
        alignment: 'right',
      },
      planTotalCredit: {
        bold: true,
        alignment: 'center',
        decoration: 'underline',
        decorationStyle: 'dotted'
      }
    }
  }
}

export function totalCredits(plan) {
  let credits = 0
  plan.transferred.forEach((c) => {
    credits = credits + parseInt(c.CreditHours)
  })
  plan.semesters.forEach((s) => {
    s.courses.forEach((c) => {
      credits = credits + parseInt(c.CreditHours)
    })
  })
  return [{
    text: 'This Plan\'s Total Credits: ' + credits,
    style: 'planTotalCredit'
  }]
}

export function generatePDF(plan, shortenedURL) {
  let docDefinition = {
    // [left, top, right, bottom]
    pageMargins: [20, 30, 20, 20],
    ...metadata(plan.name),
    ...header(plan.name),
    ...footer(),
    content: [],
    ...styles()
  }
  // Transferred Course
  // Aviod Reference issue
  let t = {
    courses: plan.transferred
  }
  docDefinition.content = docDefinition.content.concat(semesterTable(t))

  // Normal Plan
  plan.semesters.forEach((s) => {
    docDefinition.content = docDefinition.content.concat(semesterTable(s))
  })

  // Total Credits
  docDefinition.content = docDefinition.content.concat(totalCredits(plan))

  // Short URL
  if (shortenedURL) {
    docDefinition.content = docDefinition.content.concat(['\n\n\n', addShortURL(shortenedURL)])
  }

  return pdfMake.createPdf(docDefinition)
}
