import Unify from '@/utils/unify'
const pdfMake = require('pdfmake/build/pdfmake.js')
// https://github.com/bpampuch/pdfmake/issues/910
import pdfFonts from "pdfmake/build/vfs_fonts"
pdfMake.vfs = pdfFonts.pdfMake.vfs

export default {}

export function header(planName) {
  return {
    header: {
      columns: [{
          text: `Plan: ${planName}`,
          width: 'auto',
          style: 'headerName',
        },
        {
          text: 'Date: ' + new Date().toLocaleString('en-US'),
          alignment: 'right',
          width: '*',
          style: 'headerDate'
        }
      ]
    }
  }
}

export function metadata(planName) {
  return {
    info: {
      title: planName,
      author: 'Organizer',
      // subject: 'subject of document',
      // keywords: 'keywords for document',
    }
  }
}

export function footer() {
  return {
    footer: {
      columns: [{
          text: 'Generated by Organizer.',
          width: 'auto',
          style: 'footerLeft'
        },
        {
          text: 'https://plan.v2grad.org',
          link: 'https://plan.v2grad.org',
          alignment: 'right',
          width: '*',
          style: 'footerRight'
        }
      ]
    },
  }
}

export function semesterTable(semester) {
  let credits = 0
  let table = {
    headerRows: 1,
    widths: ['auto', '*', '*'],
    body: [
      [{
        text: Unify.READABLE_SEMESTER(semester),
        style: 'semesterTitle',
        colSpan: 3,
        alignment: 'center'
      }, {}, {}],
      [{
        text: Unify.COURSE_ATTRIBUTES.CourseName,
        style: 'semesterTableHeader'
      }, {
        text: Unify.COURSE_ATTRIBUTES.CourseTitle,
        style: 'semesterTableHeader'
      }, {
        text: Unify.COURSE_ATTRIBUTES.CreditHours,
        style: 'semesterTableHeader'
      }]
    ]
  }
  semester.courses.forEach((c) => {
    table.body.push([c.CourseName, c.CourseTitle, c.CreditHours])
    credits = credits + parseInt(c.CreditHours)
  })

  // Push Credit
  table.body.push([{
    text: '',
    border: [true, true, false, true],
  }, {
    text: '',
    border: [false, true, true, true],
  }, {
    text: `Credits: ${credits}`,
    style: 'semesterCredit',
  }])

  return [{
    unbreakable: true,
    table: table,
    //layout: 'lightHorizontalLines'
  }, '\n\n\n']
}

export function addShortURL(URL) {
  return {
    unbreakable: true,
    columns: [{
        text: 'View and Edit this plan online with link: ',
        width: 'auto'
      },
      {
        text: URL,
        link: URL,
        width: 'auto'
      }, {
        qr: URL,
        fit: 70,
        alignment: 'right',
        width: '*'
      }
    ],
    columnGap: 5
  }
}

export function conclusion(plan) {
  let credits = 0
  let summer = 0
  let fall = 0
  let spring = 0
  plan.transferred.forEach((c) => {
    credits = credits + parseInt(c.CreditHours)
  })
  plan.semesters.forEach((s) => {
    switch (s.period) {
      case Unify.PERIOD[0]:
        spring += 1
        break
      case Unify.PERIOD[1]:
        summer += 1
        break
      default:
        fall += 1
        break
    }
    s.courses.forEach((c) => {
      credits = credits + parseInt(c.CreditHours)
    })
  })
  return [{
    text: `Plan 's Total Semesters: ${plan.semesters.length}, including Spring:  ${spring}, Summer: ${summer}, Fall: ${fall}`,
    style: 'planConclusion'
  }, {
    text: `Plan 's Total Credits: ${credits}`,
    style: 'planConclusion'
  }]
}

export function note(plan) {
  return [{
    text: 'Note: ',
    style: 'planNoteTitle'
  }, {
    text: plan.note,
    style: 'planNote'
  }]
}

export function styles() {
  return {
    styles: {
      headerName: {
        margin: [10, 10, 10, 10],
        bold: true,
        fontSize: 15,
        decoration: 'underline',
      },
      headerDate: {
        margin: [10, 10, 10, 10],
      },
      footerRight: {
        margin: [10, 10, 10, 10],
      },
      footerLeft: {
        margin: [10, 10, 10, 10],
      },
      semesterTitle: {
        bold: true,
        fontSize: 15
      },
      semesterTableHeader: {
        fillColor: '#00c69e',
        color: '#ffffff',
        bold: true,
      },
      semesterCredit: {
        italics: true,
        alignment: 'left',
      },
      planConclusion: {
        bold: true,
        alignment: 'center',
        decoration: 'underline',
        decorationStyle: 'dotted'
      },
      planNoteTitle: {
        alignment: 'left',
        fontSize: 12,
        bold: true
      },
      planNote: {
        alignment: 'justify',
        fontSize: 12
      }
    }
  }
}

export function generatePDF(plan, shortenedURL) {
  let docDefinition = {
    // [left, top, right, bottom]
    pageMargins: [20, 50, 20, 30],
    ...metadata(plan.name),
    ...header(plan.name),
    ...footer(),
    content: [],
    ...styles()
  }
  // Transferred Course
  // Aviod Reference issue
  let t = {
    courses: plan.transferred
  }
  docDefinition.content = docDefinition.content.concat(semesterTable(t))

  // Normal Plan
  plan.semesters.forEach((s) => {
    docDefinition.content = docDefinition.content.concat(semesterTable(s))
  })

  // Total Credits
  docDefinition.content = docDefinition.content.concat(conclusion(plan))

  // Note
  docDefinition.content = docDefinition.content.concat(['\n\n', ...note(plan)])

  // Short URL
  if (shortenedURL) {
    docDefinition.content = docDefinition.content.concat(['\n\n', addShortURL(shortenedURL)])
  }

  return pdfMake.createPdf(docDefinition)
}
